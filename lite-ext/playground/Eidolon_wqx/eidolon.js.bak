YUI().use("node", "event", function (Y) {
    var canvas = document.getElementById('tutorial');
    //if (canvas.getContext){  
    var ctx = canvas.getContext('2d');
    var ZOOM = 3;
    //精灵

		
		var GraphicUtils={
			initCanvas:function(id){
				var canvas = document.getElementById('tutorial');
		    if (canvas.getContext){  
		    	var ctx = canvas.getContext('2d');
		  		this.ctx=ctx;
		  		return true;
		  	}
		  	
		  	return false;
			},
			unDraw:function (XX, YY,l) {
    		l=l||8;
        XX *= ZOOM;
        YY *= ZOOM;
        ctx.clearRect(XX, YY, l * ZOOM, l * ZOOM);
    },
			drawEidolon:function(XX, YY) {
        XX *= ZOOM;
        YY *= ZOOM;
        ctx.fillRect(XX, YY, 7 * ZOOM, 5 * ZOOM);
        ctx.clearRect(XX, YY, 1 * ZOOM, 1 * ZOOM);
        ctx.clearRect(XX + 6 * ZOOM, YY, 1 * ZOOM, 2 * ZOOM);
        ctx.clearRect(XX + 2 * ZOOM, YY + 2 * ZOOM, 1 * ZOOM, 2 * ZOOM);
        ctx.clearRect(XX + 5 * ZOOM, YY + 2 * ZOOM, 1 * ZOOM, 2 * ZOOM);
        ctx.fillRect(XX + 1 * ZOOM, YY + 7 * ZOOM, 5 * ZOOM, 1 * ZOOM);
    	},
    	drawDevil:function (XX, YY) {
        XX *= ZOOM;
        YY *= ZOOM;
        ctx.fillRect(XX + 1 * ZOOM, YY, 6 * ZOOM, 1 * ZOOM)
        ctx.fillRect(XX, YY + 1 * ZOOM, 8 * ZOOM, 7 * ZOOM)
        ctx.clearRect(XX + 1 * ZOOM, YY + 2 * ZOOM, 1 * ZOOM, 2 * ZOOM)
        ctx.clearRect(XX + 1 * ZOOM, YY + 3 * ZOOM, 2 * ZOOM, 1 * ZOOM)
        ctx.clearRect(XX + 6 * ZOOM, YY + 2 * ZOOM, 1 * ZOOM, 2 * ZOOM)
        ctx.clearRect(XX + 5 * ZOOM, YY + 3 * ZOOM, 2 * ZOOM, 1 * ZOOM)
        ctx.clearRect(XX + 2 * ZOOM, YY + 5 * ZOOM, 3 * ZOOM, 1 * ZOOM)
        ctx.clearRect(XX + 1 * ZOOM, YY + 7 * ZOOM, 1 * ZOOM, 1 * ZOOM)
        ctx.clearRect(XX + 6 * ZOOM, YY + 7 * ZOOM, 1 * ZOOM, 1 * ZOOM)
    },
    drawBrick:function (XX, YY) {
        XX *= ZOOM;
        YY *= ZOOM;
        ctx.fillRect(XX, YY + 1 * ZOOM, 8 * ZOOM, 7 * ZOOM)
        ctx.clearRect(XX, YY + 4 * ZOOM, 4 * ZOOM, 1 * ZOOM)
        ctx.clearRect(XX + 4 * ZOOM, YY + 4 * ZOOM, 4 * ZOOM, 1 * ZOOM)
        ctx.clearRect(XX + 3.5 * ZOOM, YY + 4 * ZOOM, 1 * ZOOM, 4 * ZOOM)
    },
    drawStroke:function (XX, YY) {
        XX *= ZOOM;
        YY *= ZOOM;
        ctx.strokeRect(XX, YY, 8 * ZOOM, 8 * ZOOM)
    },
    
    drawPlate:function (XX, YY) {
        XX *= ZOOM;
        YY *= ZOOM;
        ctx.fillRect(XX, YY, 8 * ZOOM, 8 * ZOOM);
        ctx.clearRect(XX + 2 * ZOOM, YY + 2 * ZOOM, 3 * ZOOM, 1 * ZOOM)
        ctx.clearRect(XX + 2 * ZOOM, YY + 2 * ZOOM, 1 * ZOOM, 3 * ZOOM)
        ctx.clearRect(XX + 6 * ZOOM, YY + 1 * ZOOM, 1 * ZOOM, 6 * ZOOM)
        ctx.clearRect(XX + 1 * ZOOM, YY + 6 * ZOOM, 6 * ZOOM, 1 * ZOOM)
    },
    
    drawHeart:function (XX, YY) {
        XX *= ZOOM;
        YY *= ZOOM;
        ctx.fillStyle = "red";
        ctx.fillRect(XX + 1 * ZOOM, YY+1*ZOOM, 6 * ZOOM, 2 * ZOOM);
        //ctx.clearRect(XX+3*ZOOM,YY+3*ZOOM,2*ZOOM,2*ZOOM)
        ctx.fillRect(XX, YY + 2 * ZOOM, 8 * ZOOM, 2 * ZOOM);
        ctx.fillRect(XX + 1 * ZOOM, YY + 3 * ZOOM, 6 * ZOOM, 2 * ZOOM);
        ctx.fillRect(XX + 2 * ZOOM, YY + 4 * ZOOM, 4 * ZOOM, 2 * ZOOM);
        ctx.fillRect(XX + 3 * ZOOM, YY + 5 * ZOOM, 2 * ZOOM, 2 * ZOOM);
        ctx.fillStyle = "black";
    },
    
    drawWait:function (XX, YY) {
        XX *= ZOOM;
        YY *= ZOOM;
        ctx.strokeRect(XX + 1, YY + 1, 6 * ZOOM, 6 * ZOOM)
        ctx.beginPath();
        ctx.moveTo(XX + 1, YY + 1);
        ctx.lineTo(XX + 6 * ZOOM, YY + 6 * ZOOM);
        ctx.closePath();
        ctx.stroke();
        ctx.beginPath();
        ctx.moveTo(XX + 6 * ZOOM, YY + 1);
        ctx.lineTo(XX + 1, YY + 6 * ZOOM);
        ctx.closePath();
        ctx.stroke();
    },
    drawProgress:function (XX, YY, perc) {
        XX *= ZOOM;
        YY *= ZOOM;
        ctx.clearRect(XX, YY, 21 * ZOOM, 5 * ZOOM);
        ctx.strokeRect(XX, YY, 21 * ZOOM, 5 * ZOOM);
        var prog = perc * 19 / 100;
        ctx.fillRect(XX + 1 * ZOOM, YY + 1 * ZOOM, prog * ZOOM, 3 * ZOOM);
    }
    
		}
		
		
    
    
    
    
    
    var MapConfig=(function(){
    	var MAPS = [
    //关数
    [
    //行数
    "BBBBBBBBBBBBBBBBB***", "B******A*B**A***B***", "B*BBBBBB*B*B*BB*B***", "BA*******B*B*BB*B***", "B*BBBBBB*BA****AB***", "BA******AB*BBBB*B***", "B*BBBBBB**A*****B***", "BA******ABBBBB**B***", "B*************A*B***", "BBBBBBBBBBBBBBBBB***"],
    
    
  [ "DDDDDDDDDDDDDDDDD***",
 "D*******A*******D***",
 "D*DDDDDD*DDDDDD*D***",
 "DA*****AAA*****AD***",
 "D*DDDDD*D*DDDDD*D***",
 "DA****D*D*D****AD***",
 "D*DDD*D*D*D*DDD*D***",
 "D***D*D*D*D*D***D***",
 "D****A*A*A*A**A*D***",
"DDDDDDDDDDDDDDDDD***",
]
    
    ];
    
    var mapGen = {
        'B': Y.bind(GraphicUtils.drawBrick,GraphicUtils)
        'C': Y.bind(GraphicUtils.drawStroke,GraphicUtils)
        'D':Y.bind(GraphicUtils.drawPlate,GraphicUtils)
        //,'A':drawPlate
    }
    
    return {
    	
    	insertMap:function(map){
    		MAPS[MAPS.length]=map;
    	},
    	insertGens:function(gen){
    		Y.mix(mapGen,gen);
    	}
    	
    	drawMap:function(level){
    		var cx = 0;
        var cy = 0;
        unDraw(cx,cy,8*17);
    		var rows = MAPS[level];
        for (cx = 0; cx < rows.length; cx++) {
            var row = rows[cx];
            for (cy = 0; cy < row.length; cy++) {
                var cell = row.charAt(cy);
                var p=mapGen[cell]||mapGen['B'];
                p(cy * 8, cx * 8);
            }
        }
    	}
    
    };
    
    
    });
    
    
    
    
    
    
    function Game(config){
    	
    }
    Game.NAME = "Game";
    Y.extend(Game,Y.Base,{
    	
    	
    	
    })
    GAME.OP={
    	UP:1,DOWN:1,LEFT:1,RIGHT:1,UNSET:0
    };
    Game.ATTRS = {
    	
    	level:{
    		value:1
    	},
    	ex:{
    		value:1
    	},
    	ey:{
    		value:1
    	},
    	eDirection:{
    		value:GAME.OP.UNSET
    	}
    	
    	dx:{
    		value:1
    	},
    	dy:{
    		value:1
    	},
    	dDirection:{
    		value:GAME.OP.UNSET
    	},
    	life:{
    		value:4
    	},
    	eats:{
    		value:0
    	},
    	max_eat:{
    		value:2
    	},
    	waitPos:{
    		value:[18 * 8, 1 * 8]
    	}
    	
    };
    
    drawEidolon(10, 10);
    drawDevil(20, 10);
    drawBrick(30, 10)
    drawStroke(40, 10)
    drawPlate(50, 10)
    drawHeart(60, 10)
    drawWait(70, 10)
    drawProgress(80, 10, 50);
    
    
    canvas = document.getElementById('game');
    ctx = canvas.getContext('2d');
    var level = 0;
    //精灵初始位置
    var ex = 1;
    var ey = 1;
    var edirection = 0;
    //恶魔初始位置
    var dx = 15;
    var dy = 1;
    var ddirection = 0;
    var life = 4;
    var eats=0;
    var MAX_EAT=2;
    
    var waitPos = [18 * 8, 1 * 8];
    var waitFlag = true;
    
    
    //心位置
    var hx=-1;
    var hy=-1;
    
    function initialize() {
    		
        
        eats=0;
        hx=-1;
        hy=-1;
        
        
        start();
    }
    
    function updateEats(){
    	drawProgress(17 * 8 + 1, 8 * 8 + 1, 100*eats/MAX_EAT);
    }
    
   
    function start(){
    	
    		drawWait(18 * 8, 1 * 8);
        drawHeart(18 * 8, 7 * 8);
        drawEidolon(18 * 8, 3 * 8);
        drawProgress(17 * 8 + 1, 4 * 8 + 1, life*25);
        updateEats();
        unDraw(ex * 8, ey * 8);
        unDraw(dx * 8, dy * 8);
        ex=1;ey=1;
        dx=15;dy=1;
        edirection=0;
        ddirection=0;
        drawEidolon(ex * 8, ey * 8);
        drawDevil(dx * 8, dy * 8);
        showHeart();
    }
    initialize();
    
    function isPass(x,y,rows){
    	return rows[y][x]=="A" || rows[y][x]=="*";
    }
    
    //return l<=x<u
    function randInt(l,u){
    	return l+Math.floor(Math.random()*(u-l));   
    }
    
    function devilThink() {
        var god = (Math.random() > 0.5);
        var rows = MAPS[level];
        if (ex > dx && (ey == dy || god) && isPass(dx+1,dy,rows)) {
            ddirection = 39;
        } else if (ex < dx && (ey == dy || god) && isPass(dx-1,dy,rows)) {
            ddirection = 37;
        } else if (ey > dy && isPass(dx,dy+1,rows)) {
            ddirection = 40;
        } else if (ey < dy && isPass(dx,dy-1,rows)) {
            ddirection = 38;
        } else {
        	ddirection = [37,38,39,40][randInt(0,4)];
        }
        console.log(ddirection);
    }
    
    function dieCheck(){    
    	if(ex==dx&&ey==dy){
    		pause();
    		life--;
    		if(life>0){
    			alert("Fail , Try Again :)");
    			start();
    		}
    		else
    			alert("Game Over!");
    		return 1;
    	}
    	return 0;
    }
    
    function showHeart(){
    	var rows = MAPS[level];
    	if(hx!=-1)unDraw(hx * 8, hy * 8);
    	while(true){
    		hx=randInt(1,16);
    		hy=randInt(1,10);
    		if(hx==ex&&hy==ey){}else
    			if(hx==dx&&hy==dy){}else
    		if(isPass(hx,hy,rows)){
    			break;    			
    		}
    		
    		
    	}
    	
    	drawHeart(hx * 8, hy * 8);
    	
    }
    
    function eatCheck(){
    	if(ex==hx && ey==hy){
    		 eats++;	
      	 updateEats(); 
      	 hx=-1;     	 
      	 if(eats==MAX_EAT){
      	 		
      	 		level++;
      	 		console.log(level);
      	 		if(level==MAPS.length){
      	 			alert("通关了！从头开始");
      	 			level=0;
      	 		}else
      	 		alert("congratulation,Enter next level!");
      	 		pause();
      	 		initialize(); 		
      	 }else{
      		showHeart();
      	}     
      }
      if(dx==hx&&dy==hy){
      	drawHeart(hx * 8, hy * 8);
      }
    }

    function run() {
        if (edirection) {
            var nx = ex,
                ny = ey;
            if (edirection == 38) {
                ny -= 1;
            } else if (edirection == 40) {
                ny += 1;
            } else if (edirection == 37) {
                nx -= 1
            } else if (edirection == 39) {
                nx += 1;
            }
            if (nx > 0 && nx < 16 && ny > 0 && ny < 10) {
                var rows = MAPS[level];
                if (rows[ny][nx] == "*" || rows[ny][nx] == "A") {
                    unDraw(ex * 8, ey * 8);
                    ex = nx;
                    ey = ny;
                    drawEidolon(ex * 8, ey * 8);
                }
            }
            
            
            
        }
        eatCheck();
        if(dieCheck()){
        	return;
        }
        return;
        if (ddirection) {
            var nx = dx,
                ny = dy;
            if (ddirection == 38) {
                ny -= 1;
            } else if (ddirection == 40) {
                ny += 1;
            } else if (ddirection == 37) {
                nx -= 1
            } else if (ddirection == 39) {
                nx += 1;
            }
            console.log(nx, ny);
            if (nx > 0 && nx < 16 && ny > 0 && ny < 10) {
                var rows = MAPS[level];
                if (rows[ny][nx] == "*" || rows[ny][nx] == "A") {
                    unDraw(dx * 8, dy * 8);
                    eatCheck();
                    dx = nx;
                    dy = ny;
                    drawDevil(nx * 8, ny * 8);
                    if(rows[ny][nx] == "A"){
                    	devilThink();
                    }
                } else {
                    devilThink();
                }
            } else {
                devilThink();
            }
        } else {
            devilThink();
        }
        if(dieCheck()){
        	return;
        }
    }
    var loopRun = null;
    
    function pause(){
    	waitFlag = !waitFlag;
            if (waitFlag) {
                drawWait(waitPos[0], waitPos[1]);
                clearInterval(loopRun);
            } else {
                unDraw(waitPos[0], waitPos[1]);
                loopRun = setInterval(run, 200);
            }
    }
    
    Y.one(document).on("keydown", function (e) {
        //console.log(e);
        console.log(e.charCode);
        //parse
        if (e.keyCode == 80) {
            pause();
        }
        if (waitFlag) return;
        if (e.keyCode == 38 || e.keyCode == 40 || e.keyCode == 37 || e.keyCode == 39) {
            edirection = e.keyCode;
        }
    });
});